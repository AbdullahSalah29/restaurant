// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using restaurant.appDB;

#nullable disable

namespace restaurant.Migrations
{
    [DbContext(typeof(AppDB))]
    partial class AppDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("restaurant.Models.Food", b =>
                {
                    b.Property<int>("food_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("food_ID"), 1L, 1);

                    b.Property<string>("food_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("food_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("food_ID");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("restaurant.Models.Order", b =>
                {
                    b.Property<int>("order_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_ID"), 1L, 1);

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customar_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("messege")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("payment")
                        .HasColumnType("bit");

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("price")
                        .HasColumnType("int");

                    b.Property<string>("username_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("order_ID");

                    b.HasIndex("username_ID");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("restaurant.Models.Order_Food", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("food_ID")
                        .HasColumnType("int");

                    b.Property<int>("order_ID")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("food_ID");

                    b.HasIndex("order_ID");

                    b.ToTable("order_Foods");
                });

            modelBuilder.Entity("restaurant.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Master_card")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("csv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("username_ID");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("restaurant.Models.Tabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("KindOfFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("username_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("username_ID");

                    b.ToTable("tabel");
                });

            modelBuilder.Entity("restaurant.Models.User", b =>
                {
                    b.Property<string>("username_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("username_ID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("restaurant.Models.Order", b =>
                {
                    b.HasOne("restaurant.Models.User", "user")
                        .WithMany("orders")
                        .HasForeignKey("username_ID");

                    b.Navigation("user");
                });

            modelBuilder.Entity("restaurant.Models.Order_Food", b =>
                {
                    b.HasOne("restaurant.Models.Food", "food")
                        .WithMany("orders")
                        .HasForeignKey("food_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("restaurant.Models.Order", "order")
                        .WithMany("orders")
                        .HasForeignKey("order_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("food");

                    b.Navigation("order");
                });

            modelBuilder.Entity("restaurant.Models.Payment", b =>
                {
                    b.HasOne("restaurant.Models.User", "user")
                        .WithMany("Payment")
                        .HasForeignKey("username_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("restaurant.Models.Tabel", b =>
                {
                    b.HasOne("restaurant.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("username_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("restaurant.Models.Food", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("restaurant.Models.Order", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("restaurant.Models.User", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
